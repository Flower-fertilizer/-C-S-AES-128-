package CS;

import java.util.Random;
import java.net.*;
import java.io.*;

public class AES_Client extends javax.swing.JFrame {
    
    /**
     * Creates new form ContactEditor
     */
    public AES_Client() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        random = new javax.swing.JRadioButton();
        nop = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        result = new javax.swing.JTextField();
        encryption = new javax.swing.JButton();
        result2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AES加密客户端");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "客户端", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 18))); // NOI18N
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel6.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel6.setText("请输入密钥(128bits):");

        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel7.setText("采用随机密钥:");

        buttonGroup1.add(random);
        random.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        random.setSelected(true);
        random.setText("是");
        random.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        random.setMargin(new java.awt.Insets(0, 0, 0, 0));
        random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomActionPerformed(evt);
            }
        });

        buttonGroup1.add(nop);
        nop.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        nop.setText("否");
        nop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        nop.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel1.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel1.setText("加密结果(HEX)：");

        result.setToolTipText("");
        result.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultActionPerformed(evt);
            }
        });

        encryption.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        encryption.setText("加密并发送");
        encryption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encryptionMouseClicked(evt);
            }
        });
        encryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionActionPerformed(evt);
            }
        });

        result2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                result2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel2.setText("输入时请以空格划分");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(encryption, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(random)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nop)
                                .addGap(51, 51, 51))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(result2)
                                    .addComponent(result, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(key)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 11, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nop)
                    .addComponent(random))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(result2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encryption, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static int[][] sbox = 	
            /* 0     1      2     3     4    5      6    7     8     9     a     b     c    d     e     f */
      /*0*/ {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
      /*1*/  {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
      /*2*/  {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
      /*3*/  {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
      /*4*/  {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
      /*5*/  {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
      /*6*/  {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
      /*7*/  {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
      /*8*/  {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
      /*9*/  {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
      /*a*/  {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
      /*b*/  {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
      /*c*/  {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
      /*d*/  {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
      /*e*/  {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
      /*f*/  {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};//S盒表
      static int[] rc = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};//RC表
      //字节替代
      public int[][] subByte(int[][] sub){
              int row, col;
              int[][] temp = new int[4][4];
              for(int i = 0; i < 4; i++){
                  for(int j = 0; j < 4; j++){
                      col = sub[i][j] & 0xf;
                      row = (sub[i][j] >> 4) & 0xf;
                      temp[i][j] = sbox[row][col];
                  }
              }
              return temp;
      }
      // 行移位  
      public int[][] shift(int[][] sub) {  
              int i, j, k, temp;  
              int shiftNum = 0;
              for(i = 0; i < 4; i++){
                  for(j = 0; j < shiftNum; j++){
                      temp = sub[i][0];
                      for(k = 0; k < 3; k++){
                          sub[i][k] = sub[i][k + 1];
                      }
                      sub[i][k] = temp;
                  }
                  shiftNum++;
              }
              return sub;  
      }  
      // 列混合  
      public int[][] mix(int[][] sub) {  
              int i, j;
              int[][] result = new int[4][4];
              for(j = 0; j < 4; j++) {
                      for(i = 0; i < 4; i++) {
                              result[i][j] = xtime(sub[i % 4][j])//0x02乘法 
                                              ^ (sub[(i + 1) % 4][j] ^ xtime(sub[(i + 1) % 4][j]))//0x03乘法
                                              ^ sub[(i + 2) % 4][j]//0x01乘法
                                              ^ sub[(i + 3) % 4][j];//0x01乘法
                      }
              }
      return result;  
      }  
      //列混合所用函数
      public int xtime (int sub) {
              int temp;
              temp = sub << 1;
              if((sub & 0x80) != 0) {
                      temp ^= 0x1b;
              }
              return temp;
      }
      //轮密钥加
      public int[][] add(int sub[][], int[][] roundKey) {  
              for (int i = 0; i < 4; i++)  {
                  for (int j = 0; j < 4; j++) {  
                      sub[i][j] = sub[i][j] ^ roundKey[i][j];  
                  }  
              }
              return sub;  
      }  
      // 密钥扩展  
      public int[][][] key(int[][] okey) {   
              int[][][] retarray = new int[11][4][4];// 对W数组扩充40个新列，构成总共44列的扩展密钥数组  
              for (int i = 0; i < 4; i++)  {
                  for (int j = 0; j < 4; j++) {  
                      retarray[0][i][j] = okey[i][j];  
                  }  
              }
              for (int i = 1; i < 11; i++) {  
                  retarray[i] = tkey(retarray[i - 1], rc[i - 1]);  
              }  
              return retarray;  
      } 
      //密钥扩展中所用函数  
      public int[][] tkey(int[][] okey, int ri) {  
              int[][] temp = new int[4][4];  
              int col, row;  
              col = okey[1][3] & 0xf;  
              row = (okey[1][3] >> 4) & 0xf;  
              temp[0][0] = ri ^ sbox[row][col] ^ okey[0][0];  
              col = okey[2][3] & 0xf;  
              row = (okey[2][3] >> 4) & 0xf;  
              temp[1][0] = sbox[row][col] ^ okey[1][0];  
              col = okey[3][3] & 0xf;  
              row = (okey[3][3] >> 4) & 0xf;  
              temp[2][0] = sbox[row][col] ^ okey[2][0];  
              col = okey[0][3] & 0xf;  
              row = (okey[0][3] >> 4) & 0xf;  
              temp[3][0] = sbox[row][col] ^ okey[3][0];  
              for (int i = 1; i < 4; i++) {  
                  temp[0][i] = temp[0][i - 1] ^ okey[0][i];  
                  temp[1][i] = temp[1][i - 1] ^ okey[1][i];  
                  temp[2][i] = temp[2][i - 1] ^ okey[2][i];  
                  temp[3][i] = temp[3][i - 1] ^ okey[3][i];  
              }  
              return temp;  
      }  

      public int[][] aes(int[][] sub, int[][] firstKey){
              int[][][] roundKey = new int[11][4][4];
              roundKey = key(firstKey);       
              sub = add(sub, roundKey[0]);
              for(int i = 1; i <= 9; i++){
                  sub = subByte(sub);
                  sub = shift(sub);
                  sub = mix(sub);
                  sub = add(sub, roundKey[i]);	    
              }
              sub = subByte(sub);
              sub = shift(sub);
              sub = add(sub, roundKey[10]);
              return sub;
      }
    private void randomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_randomActionPerformed

    private void resultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed

    private void encryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_encryptionActionPerformed

    private void encryptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encryptionMouseClicked
        // TODO add your handling code here:
        String input = "";
        String[] temp = {};
        input = key.getText();
        int[][] secret = new int[4][4];
        int[][] clear1 = new int[4][4];
        int[][] clear2 = new int[4][4];
        int count = 0;
        int num = 0;
        String str = "";
        String str2 = "";
        String str3 = "";
        input = key.getText();
        if(input != ""){
            temp = input.split(" ");
        }
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                if(random.isSelected()){
                   secret[i][j] = new Random().nextInt(16);
                }
                else{
                    secret[j][i] = Integer.parseInt(temp[count], 16);
                    count++;
                }
                clear1[i][j] = new Random().nextInt(16);
                clear2[i][j] = new Random().nextInt(16);
            }
        }
        clear1 = aes(clear1, secret);
        clear2 = aes(clear2, secret);
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                if(clear1[j][i] < 16){
                    str = str + "0";
                }
                str = str + Integer.toHexString(clear1[j][i]) + " ";
            }
        }
        result.setText("第一组密文：" + str);
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                if(clear2[j][i] < 16){
                    str2 = str2 + "0";
                }
                str2 = str2 + Integer.toHexString(clear2[j][i]) + " ";
            }
        }
        result2.setText("第二组密文：" + str2);
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                str3 = str3 + secret[j][i] + " ";
            }
        }
        try{
            Socket socket = new Socket("127.0.0.1", 9999);
            OutputStream outputStream = socket.getOutputStream();
            PrintWriter printWriter = new PrintWriter(outputStream);
            printWriter.print(str3 + "," + str + "," + str2);
            printWriter.flush();
            socket.shutdownOutput();
        }
        catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_encryptionMouseClicked

    private void result2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_result2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_result2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AES_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AES_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AES_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AES_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AES_Client().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton encryption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JTextField key;
    private javax.swing.JRadioButton nop;
    private javax.swing.JRadioButton random;
    private javax.swing.JTextField result;
    private javax.swing.JTextField result2;
    // End of variables declaration//GEN-END:variables
    
}
